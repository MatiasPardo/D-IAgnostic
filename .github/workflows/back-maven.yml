name: Deploy Backend

on:
  push:
    branches:
      - back-release-*
  pull_request:
    branches:
      - back-release-*
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'
    - name: Build with Maven
      run: mvn -B package --file back/pom.xml

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -f back/pom.xml clean package

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-app
        path: back/target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: backend-app

    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USER }}
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          # Matar el proceso que ocupa el puerto 8080 (si lo hay)
          sudo fuser -k 8080/tcp || true
          # Copiar el JAR al Droplet
          scp -o StrictHostKeyChecking=no backend-app/*.jar ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:/home/${{ secrets.DROPLET_USER }}/*.jar
          # Ejecutar el JAR
          # nohup java -jar /home/${{ secrets.DROPLET_USER }}/*.jar > /dev/back 2>&1 &
          echo "Funciona conexion" > /home/funcionaacceso.txt
          cat /home/funcionaacceso.txt
